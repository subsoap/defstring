local defstring = require("defstring.defstring")

--[[

This some built in Lua string functions but not all
http://www.lua.org/manual/5.1/manual.html#5.4

--]]

function init(self)
	test_string_1 = "The quick brown fox jumps over the lazy dog"
	test_string_2 = 
[[O that this too too solid flesh would melt,
Thaw, and resolve itself into a dew!
Or that the Everlasting had not fix'd 
His canon 'gainst self-slaughter! O God! God!
How weary, stale, flat, and unprofitable
Seem to me all the uses of this world!]] -- do not worry if the above does not style properly in editor
	test_string_3 = "       Text with  whitespace       before  and after.      "
	test_string_4 = "doki dOKi kokoro"
	test_string_5 = "doo dee doo doo doop dee doooo"
	test_string_6 = "[[VERIFY]]"
	test_string_7 = [[ Hello, my
		good sir

		]]
	test_string_8 = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. In ultricies dapibus augue, in rutrum est sollicitudin non. Curabitur porta risus sed cursus scelerisque. Vivamus aliquam enim eget nunc blandit, non vulputate nisi lacinia. Aliquam hendrerit leo commodo nisl dapibus molestie. Praesent dictum lorem tellus, finibus dignissim sapien dictum et. Nullam vitae arcu eu orci commodo posuere sed in lorem. Integer finibus justo in malesuada blandit. Aliquam varius urna ac justo laoreet pulvinar. Sed placerat augue vel vehicula vehicula. Quisque scelerisque volutpat eros, at mollis nisi. Praesent a felis ut erat ultrices suscipit. Donec luctus odio suscipit lacus aliquet, fringilla elementum nunc accumsan. Curabitur id sodales mauris. Integer orci dolor, euismod at tortor ut, ultricies maximus velit. Maecenas velit est, ornare sed vulputate at, euismod et justo."

	pprint(test_string_1)
	pprint(test_string_2)
	pprint("[" .. test_string_3 .. "]")
	
	pprint("[" .. defstring.trim(test_string_3) .. "]")
	pprint("[" .. defstring.trim_left(test_string_3) .. "]")
	pprint("[" .. defstring.trim_right(test_string_3) .. "]")
	pprint("[" .. defstring.trim_extraspace(test_string_3) .. "]")
	
	pprint(defstring.capitalize(test_string_4))
	pprint(defstring.capitalize_every_word(test_string_4))
	pprint(defstring.split(test_string_1," "))
	pprint(defstring.join(defstring.split(test_string_1," "), " "))
	
	pprint(defstring.contains(test_string_1,"fox"))
	pprint(defstring.contains(test_string_1,"qwerty"))
	
	local fish = defstring.iterator("fish")
	for i=1, #"fish", 1 do
		pprint(fish())
	end
	pprint(defstring.strip(test_string_1,"foxy"))
	pprint(defstring.pad_zero("24",6))
	pprint(defstring.count(test_string_5,"doo"))
	pprint(defstring.count(test_string_5,"d"))
	pprint(defstring.count(test_string_5,"o"))
	pprint(defstring.count(test_string_5,"e"))
	
	pprint(defstring.is_beginning(test_string_1,"The"))
	pprint(defstring.is_beginning(test_string_1,"the"))
	pprint(defstring.is_ending(test_string_1,"dog"))
	pprint(defstring.is_ending(test_string_1,"doggo"))
	
	pprint(test_string_6)
	pprint(defstring.is_contained(test_string_6,"[[","]]"))
	pprint(defstring.replace(test_string_1,"fox","human"))
	pprint("$" .. defstring.comma(10000000))
	
	pprint("\\")
	pprint(defstring.make_javascript_safe("\\"))
	
	pprint(defstring.get_from_left(test_string_1,11))
	pprint(defstring.get_from_right(test_string_1,11))
	pprint(defstring.get_char(test_string_1,1))
	pprint(defstring.set_char(test_string_1,1,"HELLO"))
	
	pprint(defstring.insert_into(test_string_1,1,"HELLO"))
	
	pprint(defstring.remove_last_word(test_string_1))
	pprint(defstring.remove_last_word(test_string_1, 6))
	
	pprint(defstring.get_first_word(test_string_1))
	pprint(defstring.get_last_word(test_string_1))
	
	pprint(defstring.validate_email_address("hello@world.io"))
	pprint(defstring.validate_email_address("not_an_email@@@"))
	
	print(defstring.is_alphabetic("hello"))
	print(defstring.is_alphabetic("hello777"))
	
	print(defstring.is_numeric("777"))
	print(defstring.is_numeric("hello777"))	
	
	pprint(test_string_7)
	pprint(defstring.remove_final_newline(test_string_7))
	
	print("1" .. defstring.ordinal_suffix(1))
	print("2" .. defstring.ordinal_suffix(2))
	print("3" .. defstring.ordinal_suffix(3))
	print("7814845" .. defstring.ordinal_suffix(7814845))
	
	print(defstring.shorten(test_string_8,20,"...",false))
	print(defstring.shorten(test_string_8,20,"...",true))
	pprint(defstring.wrap(test_string_8,66))
	print(defstring.duplicate("echo",10))
	
	print(defstring.remove_line_breaks(test_string_2))
	print(defstring.wrap(defstring.remove_line_breaks(test_string_2)))
	
	print(defstring.remove_line_breaks(defstring.remove_tabs(test_string_7)))
end


function update(self, dt)

end
